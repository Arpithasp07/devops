apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 8000

-----------------------------------------------------
version: "3"
services:
        db:
                image: mysql:latest
                environment:
                        MYSQL_ROOT_PASSWORD: root
                        MYSQL_DATABASE: wordpress
                        MYSQL_USER: wordpress
                        MYSQL_PASSWORD: wordpress
                volumes:
                        - db_data:/var/lib/mysql
        wordpress:
                depends_on:
                        - db
                build: .
                ports:
                        - "8000:80"
                environment:
                        WORDPRESS_DB_HOST: db:3306
                        WORDPRESS_DB_USER: wordpress
                        WORDPRESS_DB_PASSWORD: wordpress
                        WORDPRESS_DB_NAME: wordpress
                volumes:
                        - wp_data:/var/www/html
volumes:
        db_data: {}
        wp_data: {}
-------------------------------------------------------

app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_docker():
    return 'Hello, Docker!'

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)


FROM python:3.9-slim
WORKDIR /app
COPY app.py /app
RUN pip install --no-cache-dir Flask
EXPOSE 5000
CMD ["python", "app.py"]
------------------------------------------------------
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort
-------------------------------------------------------
Dockerfile

FROM node:14
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "app.js"]

app.js

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, Docker...!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


package.json

{
  "name": "docker-node-app",
  "version": "1.0.0",
  "description": "Node.js for Docker",
  "main": "app.js",
  "dependencies": {
    "express": "^4.17.1"
  }
}
-------------------------------------------------
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.31.0"
    }
  }
}


ec2.tf

provider "aws" {

  region = "ap-south-1"  
  access_key = " "
  secret_key = " "
}

# Create a security group
resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow incoming SSH traffic"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
}
# Create an EC2 instance
resource "aws_instance" "ex_instance" {
  ami           = " "  # 
  instance_type = "t2.medium"      # Specify the instance type

  # Associate the security group with the EC2 instance
  vpc_security_group_ids = [aws_security_group.allow_ssh.id]

  tags = {
    Name = "ex-instance"
  }
}
